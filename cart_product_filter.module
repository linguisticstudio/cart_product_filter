<?php
/**
 * @file
 * A module to apply bulk variations to ubercart product's list price, cost, sell price
 */

/**
 * Implementation of hook_menu()
 */
function cart_product_filter_menu() {
	$items['admin/pricevariation/filter'] = array(
		'title'=>t('Cart Price Variation'),
		'page callback'=> 'cart_product_filter_main',
		'access callback' => 'user_access',
		'access arguments' => array('access administration pages'),
	); 
	$items['ajaxsubmit'] = array(
		'title'=>t('Ajax submit handler'),
		'page callback'=> 'cart_product_ajax_submit',
		'access callback' => 'user_access',
		'access arguments' => array('access administration pages'),
	);
	$items['contextajaxsubmit'] = array(
		'title'=>t('Ajax context edit submit handler'),
		'page callback'=> 'cart_product_ajax_context_submit',
		'access callback' => 'user_access',
		'access arguments' => array('access administration pages'),
	);
	$items['admin/pricevariation/settings'] = array(
		'title' => 'Filter vocabulary settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('cart_product_filter_settings'),
		'description' => "Admin setting for set the time limit of streaming videos.",
		'access callback' => 'user_access',
		'access arguments' => array('access administration menu'),
	);
	$items['autocomplete/cartfilter/title'] = array(
		'title' => 'Autocomplete cartfilter title',
		'page callback' => 'autocomplete_title_textfield',
		'access callback' => TRUE,
		'weight' => 1,
	);
	$items['autocomplete/cartfilter/sku'] = array(
		'title' => 'Autocomplete cartfilter sku',
		'page callback' => 'autocomplete_sku_textfield',
		'access callback' => TRUE,
		'weight' => 1,
	);
	$items['admin/pricevariation'] = array(
		'title'=> 'Product Price Variation',
		'description' => 'Price ariation module configuration.',
		'position' => 'right',
		'weight' => 6,
		'menu_name' => 'management',
		'page callback' => 'cart_product_filter_conf',
		'access callback' => 'user_access',
		'access arguments' => array('access administration pages'),
	);
 
	return $items;
}

/**
 * Menu Callback function for display all menu items under admin/pricevariation
 * @return Ambigous <string, mixed, An>
 */
function cart_product_filter_conf() {
	$item = menu_get_item();
	$output = print_r($item,TRUE);
	$content = system_admin_menu_block($item);  
	if ($content = system_admin_menu_block($item)) {
		$output = theme('admin_block_content', array('content' => $content));
	}
	else {
		$output .= t('You do not have any administrative items.').print_r($content,TRUE);
	}
	return $output;
}

/**
 * Main callback function for the filter
 */
function cart_product_filter_main() {
	$output = drupal_render(drupal_get_form('cart_product_filter_search_form'));
	$output .= drupal_render(drupal_get_form('cart_product_filter_bulk_form'));
	$output .= _cart_product_filter_list();
	return $output;
}

/**
 * Filter form function
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return multitype:string number multitype: multitype:string  Ambigous <The, string, A, Optional>
 */
function cart_product_filter_search_form($form, &$form_state) {
	$get = drupal_get_query_parameters();
	$status = '';
	$title = '';
	$sku = '';
	
	if (!empty($get['node_status'])) {
		$status = $get['node_status'];
		$title = $get['node_title'];
		$sku = $get['node_sku'];    
	}
  
	$form['tax1'] = array(
		'#type' => 'fieldset',
		'#title' => t('Filter Products'),
		'#weight' => 5,
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	
	$vids = variable_get('cart_product_filter_voc_filter');
	$voc_names = taxonomy_vocabulary_get_names();
	
	foreach ($vids as $key => $value) {
		if(!empty($value)) {
			$f_name = 'voc_' . $key;
			$voc = '';
			if (!empty($get['node_status'])) {
				$voc = $get[$f_name];
			}
			$f_title = $voc_names[$key]->name;
			$vocabulary = taxonomy_vocabulary_machine_name_load($key);
			$form['tax1'][$f_name] = array(
				'#type' => 'hierarchical_select',
				'#title' => t($f_title),
				'#prefix' => '<div class="element1">',
				'#suffix' => '</div>',
				'#config'        => array(
					'module' => 'hs_taxonomy',
					'params' => array(
						'vid'                        => (int) $vocabulary->vid,
						'exclude_tid'                => NULL,
						'root_term'                  => NULL,
						'entity_count_for_node_type' => NULL,
					),
					'dropbox' => array(
						'status' => 0
					),
					'level_labels' => array(
						'status' => 0
					),
					'editability' => array(
						'status' => 0
					),
					'save_lineage' => 0,
					'enforce_deepest' => 0,
					'entity_count' => 0,
					'require_entity' => 0,
					'render_flat_select' => 0,
				),       
				'#default_value' => array($voc),
			);     
		}    
	}

	$form['tax1']['node_status'] = array(
		'#type' => 'select',
		'#title' => t('Status'),
		'#options' => array(
			'any' => t('any'),
			'status-1' => t('published'),
			'status-0' => t('not published'),
			'promote-1' => t('promoted'),
			'promote-0' => t('not promoted'),
			'sticky-1' => t('sticky'),
			'sticky-0' => t('not sticky'),
		),
		'#default_value' => $status,      
		'#prefix' => '<div class="elementfull"><div class="element200">',
		'#suffix' => '</div>'
	);

	$form['tax1']['node_title'] = array(
		'#type' => 'textfield',
		'#title' => t('Title'),
		'#size' => 30,     
		'#default_value' => $title,
		'#autocomplete_path' => 'autocomplete/cartfilter/title',
		'#prefix' => '<div class="element300">',
		'#suffix' => '</div>'
	);
	
	$form['tax1']['node_sku'] = array(
		'#type' => 'textfield',
		'#title' => t('SKU'),
		'#size' => 30,
		'#default_value' => $sku,
		'#autocomplete_path' => 'autocomplete/cartfilter/sku',
		'#prefix' => '<div class="element300">',
		'#suffix' => '</div></div>'
	);
	
	$form['tax1']['bt_filter'] = array(
		'#type' => 'submit',
		'#value' => t('Filter'), 
		'#submit' => array('filter_handler_submit'),
		'#prefix' => '<div class="element750"><div class="element100">',
		'#suffix' => '</div>'
	);
  
	$form['tax1']['cancel'] = array(
		'#markup' => l(t('Reset'), 'admin/pricevariation/filter'),
		'#prefix' => '<div class="elementcancel">',
		'#suffix' => '</div></div>'
	);
	
	return $form;
}

/**
 * Submit handler for filter form to redirect to same page and attach fields as get params
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function filter_handler_submit($form, &$form_state) {
	$post = $_POST;
	$query = array();
	//sanitaise the tids
	$vids = variable_get('cart_product_filter_voc_filter');
	$voc_names = taxonomy_vocabulary_get_names();
	foreach ($vids as $key => $value) {
		if(!empty($value)) {
			$tid = '';
			$f_name = 'voc_' . $key;
			$tmp = $post[$f_name]['hierarchical_select']['selects'];
			$last_select = count($tmp) - 1;
			$pre_select = $last_select - 1;
			if (is_numeric($post[$f_name]['hierarchical_select']['selects'][$last_select])) {
				$tid = $post[$f_name]['hierarchical_select']['selects'][$last_select];
			}else if ($pre_select >= 0 and is_numeric($post[$f_name]['hierarchical_select']['selects'][$pre_select])) {
				$tid =  $post[$f_name]['hierarchical_select']['selects'][$pre_select];
			}
			$query[$f_name] = $tid;
		}
	}
	$query['node_status'] = $post['node_status'];
	$query['node_title'] = $post['node_title'];
	$query['node_sku'] = $post['node_sku'];  
	$param['query'] = $query;
	drupal_goto('admin/pricevariation/filter', $param);
	exit();
}

/**
 * Ajax submit handler for bulk price variation
 */
function cart_product_ajax_submit() {
	$get = drupal_get_query_parameters();  
	$nid = $get['nids'];
	$nids = explode(',', rtrim($nid, ','));

	//Fixed price variation
	if ($get['bulk_mode_fixed'] == 'on') {
		$options = array();
		if(!empty($get['fixed_list'])) {
			$options['list_price'] = $get['fixed_list'];
		}
		if(!empty($get['fixed_cost'])) {
			$options['cost'] = $get['fixed_cost'];
		}
		if(!empty($get['fixed_sell'])) {
			$options['sell_price'] = $get['fixed_sell'];
		}
		if (!empty($options)) {
			for ($i = 0; $i < count($nids); $i++) {
				$num_updated = db_update('uc_products')
								->fields($options)
								->condition('nid', $nids[$i])
								->execute();
			}
		}
		
		$options_b2b = array();
		if(!empty($get['fixed_b2b_sell'])) {
			$options_b2b['price'] = $get['fixed_b2b_sell'];
		}
		if (!empty($options_b2b)) {
			for ($i = 0; $i < count($nids); $i++) {
				db_update('uc_price_per_role_prices') 
				->fields($options_b2b)
				->condition('nid', $nids[$i])
				->execute();
			}
		}
	}else if ($get['bulk_mode_percentage'] == 'on') { //Percentage price variation
		for ($i = 0; $i < count($nids); $i++) {
			$query = db_select('uc_products', 'p');
			$query->leftJoin('uc_price_per_role_prices', 'upprp', 'upprp.nid = p.nid');
			$value = $query->fields('p', array('list_price', 'cost', 'sell_price'));
			$value = $query->fields('upprp', array('price'));
			$value = $query->condition('p.nid', $nids[$i])
					->execute()
					->fetchAll(PDO::FETCH_ASSOC);
					
			// drupal_set_message('value<br /><pre>'. print_r($value, true) .'</pre>');
			// drupal_set_message('get<br /><pre>'. print_r($get, true) .'</pre>');
			
			$options = array();
			if(!empty($get['per_list'])) {
				$options['list_price'] = $value[0]['list_price'] + $value[0]['list_price'] * ($get['per_list']/100);
			}
			if(!empty($get['per_cost'])) {
				$options['cost'] = $value[0]['cost'] + $value[0]['cost'] * ($get['per_cost']/100);
			}
			if(!empty($get['per_sell'])) {
				$options['sell_price'] = $value[0]['sell_price'] + $value[0]['list_price'] * ($get['per_sell']/100);
			}
			if (!empty($options)) {
				db_update('uc_products') 
				->fields($options)
				->condition('nid', $nids[$i])
				->execute();
			}
			
			$options_b2b = array();
			if(!empty($get['per_b2b_sell'])) {
				$options_b2b['price'] = $value[0]['price'] + $value[0]['list_price'] * ($get['per_b2b_sell']/100);
			}			
			if (!empty($options_b2b)) {
				db_update('uc_price_per_role_prices') 
				->fields($options_b2b)
				->condition('nid', $nids[$i])
				->execute();
			}			
		}
	}
	drupal_set_message('Variations applied on selected products');
	exit();
}

/**
 * Ajax submit handler for context edit
 */
function cart_product_ajax_context_submit() {
	$get = drupal_get_query_parameters(); 
	$nid = $get['nid'];
	$options = array();
	$options_b2b = array();
	
	if(isset($get['list_price'])) {
		$options['list_price'] = $get['list_price'];
	}
	if(isset($get['cost_price'])) {
		$options['cost'] = $get['cost_price'];
	}
	if(isset($get['sell_price'])) {
		$options['sell_price'] = $get['sell_price'];
	}
	if (!empty($options)) {
		$num_updated = db_update('uc_products')
					   ->fields($options)
					   ->condition('nid', $nid)
					   ->execute();
	}
	
	if(isset($get['b2b_price'])) {
		$options_b2b['price'] = $get['b2b_price'];
	}
	
	if (!empty($options_b2b)) {
		$role_prices_updated = db_update('uc_price_per_role_prices')
							   ->fields($options_b2b)
							   ->condition('nid', $nid)
							   ->execute();
	}
	
	exit();
}

/**
 * The filter function to display the themed result as table. The filter query is build in this function according to the conditions
 * @return string
 */
function _cart_product_filter_list() {
	$voc_list = _cart_product_get_vocabulary(array('product'));
	$params = drupal_get_query_parameters();
	$table_rows = array();
	$header_row = array(
		array('data' => '<input type="checkbox" name ="selectall" class = "selectall" value = "1" >'),
		array('data' => 'Title', 'field' => 'n.title'),
		array('data' => 'SKU', 'field' => 'up.model'),
		array('data' => 'LIST PRICE', 'field' => 'up.list_price'),
		array('data' => 'COST', 'field' => 'up.cost'),
		array('data' => 'SELL PRICE', 'field' => 'up.sell_price'),
		array('data' => 'B2B SELL PRICE', 'field' => 'role_prices.price'),
		array('data' => 'PERCENTAGE', 'field' => 'perc'),
		array('data' => 'PERCENTAGE B2B', 'field' => 'perc_b2b'),
		array('data' => 'UPDATED', 'field' => 'n.changed'),
	);
	
	//Start building the query
	$query = db_select('node', 'n')->extend('TableSort')->orderByHeader($header_row);
	$value = $query->fields('n', array('nid', 'title', 'changed'));
	$value = $query->addExpression('((sell_price - list_price) / list_price) * :offset', 'perc', array(':offset' => 100));
	$value = $query->fields('up', array('model', 'list_price', 'cost', 'sell_price'));
	$value = $query->innerJoin('uc_products', 'up', 'up.nid = n.nid');
	$value = $query->fields('role_prices', array('price'));
	$value = $query->addExpression('((price - list_price) / list_price) * :offset', 'perc_b2b', array(':offset' => 100));
	$value = $query->innerJoin('uc_price_per_role_prices', 'role_prices', 'role_prices.nid = n.nid');
	//	Guido 14/04/2014	inizio
	//$value = $query->condition('n.type', 'product');
	$conditionOR = db_or()->condition('n.type', 'iva_10')->condition('n.type', 'iva_4')->condition('n.type', 'product');
	$value = $query->condition($conditionOR);
	//	Guido 14/04/2014	fine
	//Attach the vocabulay tids to query
	$vids = variable_get('cart_product_filter_voc_filter');
	foreach ($vids as $key => $value) {
		if(!empty($value)) {
			if (!empty($params['voc_' . $key])) {
				$voc_table = 'field_data_' . $voc_list[$key];
				$value = $query->innerJoin($voc_table, $key, $key . '.entity_id = n.nid');
				$value = $query->condition($key . '.' . $voc_list[$key] . '_tid', $params['voc_' . $key]);
			}
		}
	} 
   
	//Check the presence of title and add it to query
	if(!empty($params['node_title'])) {
		$value = $query->condition('title', '%' . db_like($params['node_title']) . '%', 'LIKE');
	}  

	//Check the presence of SKU and add it to query
	if(!empty($params['node_sku'])) {
		//$value = $query->condition('up.model', $params['node_sku']);
		$value = $query->condition('up.model', '%'.db_like($params['node_sku']).'%','LIKE');
	}

	//Check the presence of node status and add it to query
	if(!empty($params['node_status'])) {
		if ($params['node_status'] == 'status-1') {
			$value = $query->condition('n.status', 1);
		}else if ($params['node_status'] == 'status-0') {
			$value = $query->condition('n.status', 0);
		}else if ($params['node_status'] == 'promote-1') {
			$value = $query->condition('n.promote', 1);
		}else if ($params['node_status'] == 'promote-0') {
			$value = $query->condition('n.promote', 0);
		}else if ($params['node_status'] == 'sticky-1') {
			$value = $query->condition('n.sticky', 1);
		}else if ($params['node_status'] == 'sticky-0') {
			$value = $query->condition('n.sticky', 0);
		}
	}
  
	$value = $query->execute();
	foreach($value as $stat_line) { 
		$table_row['data'] = array(
			array('data' => '<input type="checkbox" name="pid" value = "' . $stat_line->nid . '" id ="select_' . $stat_line->nid .'">'),
			array('data' => l($stat_line->title, 'node/' . $stat_line->nid), 'id' => array('sku_' . $stat_line->nid), 'class' => array('funkyrow')),
			array('data' => $stat_line->model, 'id' => array('sku_' . $stat_line->nid), 'class' => array('funkyrow')),
			array('data' => '<div class="col-edit">' .  number_format($stat_line->list_price, 2, '.', '') . '</div><div class="spinner_' . $stat_line->nid . '"></div>', 'id' => array('list_' . $stat_line->nid), 'class' => array('funkyrow')),
			array('data' => '<div class="col-edit">' .  number_format($stat_line->cost, 2, '.', '') . '</div><div class="spinner_' . $stat_line->nid . '"></div>', 'id' => array('cost_' . $stat_line->nid), 'class' => array('funkyrow')),
			array('data' => '<div class="col-edit">' . number_format($stat_line->sell_price, 2, '.', '') . '</div><div class="spinner_' . $stat_line->nid . '"></div>', 'id' => array('sell_' . $stat_line->nid), 'class' => array('funkyrow')),
			array('data' => '<div class="col-edit">' . number_format($stat_line->price, 2, '.', '') . '</div><div class="spinner_' . $stat_line->nid . '"></div>', 'id' => array('b2b_sell_' . $stat_line->nid), 'class' => array('funkyrow')),
			array('data' => round($stat_line->perc, 1) . '%'),
			array('data' => round($stat_line->perc_b2b, 1) . '%'),
			array('data' => date('d/m/Y - h:i', $stat_line->changed)),
		);
		$table_row['class'] = array('funkyrow_' . $stat_line->nid);
		$table_row['id'] = 'list_row_' . $stat_line->nid;
		$table_rows[] = $table_row;   
	}
	return theme_table(
		array(
			'header' => $header_row,
			'rows' => $table_rows,
			'attributes' => array('class' => 'table_dfs', 'width' => '100%'),
			'caption' => '',
			'colgroups' => array(),
			'sticky' => FALSE,
			'empty' => 'No data is available',
		)
	);
}

/**
 * Bulk variation form function
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return multitype:string number multitype: multitype:string  Ambigous <The, string, A, Optional>
 */
function cart_product_filter_bulk_form($form, &$form_state) {
	$form['bulk'] = array(
		'#type' => 'fieldset',
		'#title' => t('Bulk price variation on selected products'),
		'#weight' => 5,
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);
	
	$form['bulk']['bulk_mode_fixed'] = array(
		'#type' => 'radio',
		'#title' => t('Fixed price changes'),
		'#default_value' => '1',      
		'#attributes' => array('class' => array('radio-fixed')),
		'#prefix' => '<div class="elementfull">',
		'#suffix' => '</div>'
	);
	
	$form['bulk']['fixed_list'] = array(
		'#type' => 'textfield',
		'#title' => t('List Price'),
		'#size' => 30,
		'#description' => t('The listed MSRP.'),
		'#prefix' => '<div class="elementfull"><div class="element300">',
		'#suffix' => '</div>'
	);
	
	$form['bulk']['fixed_cost'] = array(
		'#type' => 'textfield',
		'#title' => t('Cost'),
		'#size' => 30,
		'#description' => t('Your stores cost.'),
		'#prefix' => '<div class="element300">',
		'#suffix' => '</div>'
	);
	
	$form['bulk']['fixed_sell'] = array(
		'#type' => 'textfield',
		'#title' => t('Sell Price'),
		'#size' => 30,
		'#description' => t('Customer purchase price.'),
		'#prefix' => '<div class="element300">',
		'#suffix' => '</div>'
	);
	
	$form['bulk']['fixed_b2b_sell'] = array(
		'#type' => 'textfield',
		'#title' => t('B2B Sell Price'),
		'#size' => 30,
		'#description' => t('Customer purchase price for b2b.'),
		'#prefix' => '<div class="element300">',
		'#suffix' => '</div></div>'
	);
	
	$form['bulk']['bulk_mode_percentage'] = array(
		'#type' => 'radio',
		'#title' => t('Price percentage variation'),
		'#default_value' => 1,      
		'#attributes' => array('class' => array('radio-percentage')),
		'#prefix' => '<div class="elementfull">',
		'#suffix' => '</div>'
	);
	
	$form['bulk']['per_list'] = array(
		'#type' => 'textfield',
		'#title' => t('List Price'),
		'#size' => 30,
		'#description' => t('The listed MSRP.'),
		'#prefix' => '<div class="elementfull"><div class="element300">',
		'#suffix' => '</div>'
	);
	
	$form['bulk']['per_cost'] = array(
		'#type' => 'textfield',
		'#title' => t('Cost'),
		'#size' => 30,
		'#description' => t('Your stores cost.'),
		'#prefix' => '<div class="element300">',
		'#suffix' => '</div>'
	);
	
	$form['bulk']['per_sell'] = array(
		'#type' => 'textfield',
		'#title' => t('Sell Price'),
		'#size' => 30,
		'#description' => t('Customer purchase price.'),
		'#prefix' => '<div class="element300">',
		'#suffix' => '</div>'
	);
	
	$form['bulk']['per_b2b_sell'] = array(
		'#type' => 'textfield',
		'#title' => t('B2B Sell Price'),
		'#size' => 30,
		'#description' => t('Customer purchase price for b2b.'),
		'#prefix' => '<div class="element300">',
		'#suffix' => '</div></div>'
	);
	
	$form['bulk']['bt_apply'] = array(
		'#type' => 'button',
		'#value' => t('Apply'),
		'#attributes' => array('class' => array('bulk-apply')),
		'#prefix' => '<div class="element950"><div class="rightelement350">',
		'#suffix' => '</div></div>'
	);
  
	return $form;
}

/**
 * Callback function for the vocabulary settings admin form
 * @return Ambigous <The, string>
 */  
function cart_product_filter_settings() {
	$voc_list = _cart_product_get_vocabulary_only(array('product'));  
	if(isset($voc_list)) {
		$form['cart_product_filter_voc_filter'] = array(
			'#type'          => 'checkboxes',
			'#title'         => t('List of all vocabularies attached to product.'),
			'#position'      => 'left' ,
			'#options'       => $voc_list ,
			'#default_value' => variable_get('cart_product_filter_voc_filter'),
			'#description'   => t('Please select the vocabularies you want to see in the filter'),
		);
		return system_settings_form($form);
	}  
}

/**
 * Autocomplete callback function for title field
 * 
 * @param unknown_type $string
 */
function autocomplete_title_textfield ($string) {
	$items = array();
	$query = db_select('node', 'n');
	$value = $query->fields('n', array('nid', 'title'));
	$value = $query->join('uc_products', 'p', 'n.nid = p.nid'); //	Guido 19/06/2014, serve per filtrare solo i tipi di contenuto prodotto
	//$conditionOR = db_or()->condition('n.type', 'iva_10')->condition('n.type', 'iva_4')->condition('n.type', 'product');//	Guido 14/04/2014
	$value = $query->condition(db_and()
			 ->condition('n.status', 1)
			 //->condition('n.type', 'product')
			 //->condition($conditionOR)//	Guido 14/04/2014
			 ->condition('title', '%' . db_like($string) . '%', 'LIKE'))
			 ->orderRandom()
			 ->execute();
	$data = array();
	foreach ($value as $val) {
		$items[$val->title] = check_plain($val->title);
	}
	print drupal_json_output($items);
	exit();
}

/**
 * Autocomplete callback function for title field
 * 
 * @param unknown_type $string
 */
function autocomplete_sku_textfield ($string) {
	$items = array();
	$query = db_select('node', 'n');
	$value = $query->fields('p', array('model'));
	$value = $query->join('uc_products', 'p', 'n.nid = p.nid');
	//$conditionOR = db_or()->condition('n.type', 'iva_10')->condition('n.type', 'iva_4')->condition('n.type', 'product');//	Guido 14/04/2014
	$value = $query->condition(db_and()
			->condition('n.status', 1)
			//->condition('n.type', 'product')
			//->condition($conditionOR)
			->condition('p.model', '%' . db_like($string) . '%', 'LIKE'))
			->orderRandom()
			->execute();
	$data = array();
	foreach ($value as $val) {
		$items[$val->model] = check_plain($val->model);
	}
	print drupal_json_output($items);
	exit();
}

/**
 * Get all the vocabulary attached to a content type
 * @param unknown_type $type
 */
function _cart_product_get_vocabulary($type = array()) {
	// break if there are no types specified
	if (empty($type) || !is_array($type)) {
		return FALSE;
	}
	$output = array();
	foreach (field_info_fields() as $field) {
		if ($field['type'] == 'taxonomy_term_reference' && is_array($field['bundles']['node'])) {
			foreach ($field['bundles']['node'] as $content_type) {
				if (in_array($content_type, $type)) {
					foreach ($field['settings']['allowed_values'] as $value) {
						$output[$value['vocabulary']] = $field['field_name'];
					}
				}
			}
		}
	}
	return $output;
}

/**
 * Get all the vocabulary attached to a content type
 * @param unknown_type $type
 */
function _cart_product_get_vocabulary_only($type = array()) {
	// break if there are no types specified
	if (empty($type) || !is_array($type)) {
		return FALSE;
	}
	$output = array();
	foreach (field_info_fields() as $field) {
		if ($field['type'] == 'taxonomy_term_reference' && is_array($field['bundles']['node'])) {
			foreach ($field['bundles']['node'] as $content_type) {
				if (in_array($content_type, $type)) {
					foreach ($field['settings']['allowed_values'] as $value) {
						$output[$value['vocabulary']] = $value['vocabulary'];
					}
				}
			}
		}
	}
	return $output;
}